#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.6.2
# from Racc grammar file "".
#

require 'racc/parser.rb'
module Lrama
  class NewParser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 121)

def initialize(text)
  @text = text
  @lineno = []
  @column = []
end

def parse
  @status = :initial
  @lexer = Lrama::NewLexer.new(@text)
  @grammar = Lrama::Grammar.new
  @precedence_number = 0
  do_parse
  @grammar.extract_references
  @grammar.prepare
  @grammar.compute_nullable
  @grammar.validate!
  @grammar
end

def next_token
  case @status
  when :initial
    @lexer.lex_token
  when :c_declaration
    @lexer.lex_c_code
  end
end

def build_token(type:, s_value:, line:, column:, alias_name: nil)
  token_type = Lrama::Lexer::Token.const_get(type)
  token = Lrama::Lexer::Token.new(type: token_type, s_value: s_value)
  token.line = line
  token.column = column
  token.alias = alias_name

  token
end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
   -94,   130,    73,   150,     3,    81,   -70,   115,     6,    55,
     8,     7,   -70,   151,   152,    31,   129,    40,    20,    22,
    23,    24,    25,    26,    27,    28,    29,    80,   114,     9,
   -70,   -68,   -70,    14,    82,    12,   -70,    13,    15,    16,
    17,    18,   142,    43,    19,    20,    22,    23,    24,    25,
    26,    27,    28,    29,   142,   150,   -68,   -70,   -70,    60,
   143,    65,   -70,    45,   -70,   151,   152,    65,   -68,   -70,
   -70,    45,   143,    20,    22,    23,    24,    25,    26,    27,
    28,    29,    45,   150,    48,   -70,   -70,   150,    65,   -68,
   -70,   -70,    49,   151,   152,   -68,   -70,   151,   152,   150,
    50,   -68,   -70,   150,    51,   -68,   -70,   -68,   -70,   151,
   152,   -68,   -70,   151,   152,   -68,   -70,   -68,   -70,   -68,
   -70,   -68,   -70,   -68,   -70,    52,    70,    74,    75,    76,
    78,    83,    83,    83,    90,   -70,    94,    95,   -70,   -70,
   103,   104,   106,   107,   108,   109,   110,   111,   -70,   -70,
   117,   118,   121,   122,   132,   134,   135,   136,   137,   138,
   139,   145,   132,    78,   -70,   159,   161,   164,   165,    78,
    78 ]

racc_action_check = [
    32,   119,    32,   137,     1,    41,   137,    93,     2,    25,
     3,     2,    25,   137,   137,     7,   119,    12,    32,    32,
    32,    32,    32,    32,    32,    32,    32,    41,    93,     4,
    32,    54,    54,     4,    41,     4,    13,     4,     4,     4,
     4,     4,   131,    14,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,   155,   138,   131,   131,   138,    26,
   131,    27,    26,    15,    27,   138,   138,    28,   155,   155,
    28,    16,   155,     9,     9,     9,     9,     9,     9,     9,
     9,     9,    17,   139,    18,     9,   139,   146,    29,   146,
   146,    29,    20,   139,   139,    59,    59,   146,   146,   153,
    22,   153,   153,   154,    23,   154,   154,    63,    63,   153,
   153,    68,    68,   154,   154,    69,    69,    92,    92,    97,
    97,   112,   112,   116,   116,    24,    30,    33,    34,    37,
    38,    44,    46,    47,    53,    55,    57,    58,    60,    65,
    77,    78,    84,    85,    86,    87,    88,    89,    90,    95,
   101,   102,   104,   105,   120,   123,   124,   125,   126,   127,
   128,   133,   140,   141,   143,   144,   157,   162,   163,   164,
   165 ]

racc_action_pointer = [
   nil,     4,     5,    10,    27,   nil,   nil,     8,   nil,    55,
   nil,   nil,     8,     6,    36,    48,    56,    67,    69,   nil,
    77,   nil,    85,    89,   110,   -18,    32,    34,    40,    61,
   122,   nil,     0,    98,    98,   nil,   nil,   112,    96,   nil,
   nil,    -2,   nil,   nil,   116,   nil,   117,   118,   nil,   nil,
   nil,   nil,   nil,   107,     2,   105,   nil,   127,   110,    66,
   108,   nil,   nil,    78,   nil,   109,   nil,   nil,    82,    86,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   109,   112,   nil,
   nil,   nil,   nil,   nil,   138,   139,   140,   141,   142,   143,
   118,   nil,    88,     0,   nil,   119,   nil,    90,   nil,   nil,
   nil,   145,   147,   nil,   117,   149,   nil,   nil,   nil,   nil,
   nil,   nil,    92,   nil,   nil,   nil,    94,   nil,   nil,   -16,
   139,   nil,   nil,   139,   140,   141,   142,   143,   144,   nil,
   nil,    27,   nil,   145,   nil,   nil,   nil,   -24,    28,    56,
   147,   129,   nil,   134,   161,   nil,    60,   nil,   nil,   nil,
   nil,   nil,   nil,    72,    76,    39,   nil,   162,   nil,   nil,
   nil,   nil,   151,   152,   135,   136,   nil,   nil ]

racc_action_default = [
    -2,  -109,    -8,  -109,  -109,    -3,    -4,  -109,   168,   -68,
    -9,   -10,  -109,   -68,  -109,  -109,  -109,  -109,  -109,   -20,
  -109,   -24,  -109,  -109,  -109,   -68,   -68,   -68,   -68,   -68,
  -109,    -7,   -68,  -109,  -109,   -72,   -74,  -109,   -91,   -93,
   -11,   -98,   -97,   -13,   -14,   -59,   -15,   -16,   -17,   -21,
   -25,   -28,   -31,   -34,   -39,   -68,   -42,   -45,   -35,   -50,
   -68,   -53,   -55,   -36,   -62,   -68,   -65,   -67,   -37,   -38,
    -5,    -1,   -73,   -95,   -69,   -71,   -75,  -109,  -109,   -12,
   -99,  -100,  -101,   -56,  -109,  -109,  -109,  -109,  -109,  -109,
   -68,   -43,   -40,   -47,   -46,   -68,   -54,   -51,   -64,   -66,
   -63,  -109,  -109,   -77,  -109,  -109,   -60,   -18,   -22,   -26,
   -29,   -32,   -41,   -44,   -48,   -49,   -52,    -6,   -96,   -76,
   -82,   -92,   -57,  -109,  -109,  -109,  -109,  -109,  -109,   -79,
   -81,   -78,   -87,  -109,   -61,   -19,   -23,   -68,   -68,   -68,
   -82,   -91,   -84,   -68,  -109,   -58,   -27,  -102,  -104,  -105,
  -106,  -107,  -108,   -30,   -33,   -80,   -83,  -109,   -90,   -88,
  -103,   -85,  -109,  -109,   -91,   -91,   -89,   -86 ]

racc_goto_table = [
    61,    77,    54,    39,    59,    99,    91,    42,    35,   131,
   160,    44,    46,    47,   146,   153,   154,   160,   160,    57,
     1,    67,    67,    67,     2,     4,    39,    32,    71,   155,
     5,    72,    92,    96,    61,    63,    68,    69,    97,    99,
    98,    99,   100,    30,    91,    98,    98,   101,    57,    57,
    10,    11,    41,    79,    85,   124,    86,    67,    67,    67,
   125,    87,    67,    67,    91,   126,    88,   112,   127,    61,
    89,    96,   128,   116,    53,    58,    93,   113,   105,   133,
    84,   123,   119,   120,    57,   140,    57,   157,   163,   144,
    96,   162,    67,   102,    67,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   156,   141,    57,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   158,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   166,   167,   141 ]

racc_goto_check = [
    35,    47,    29,    31,    34,    41,    30,    31,    44,    49,
    57,    13,    13,    13,    17,    17,    17,    57,    57,    31,
     1,    31,    31,    31,     2,     3,    31,     4,     5,    49,
     6,    44,    29,    35,    35,    28,    28,    28,    34,    41,
    40,    41,    40,     7,    30,    40,    40,     8,    31,    31,
     9,    10,    11,    12,    14,    15,    18,    31,    31,    31,
    19,    20,    31,    31,    30,    21,    22,    29,    23,    35,
    24,    35,    25,    34,    26,    27,    32,    33,    36,    37,
    38,    39,    48,    50,    31,    51,    31,    52,    53,    54,
    35,    55,    31,    56,    31,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    47,    35,    31,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    35,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,    47,    35 ]

racc_goto_pointer = [
   nil,    20,    24,    23,    18,    -4,    28,    37,   -23,    46,
    47,    39,    12,    -4,     6,   -52,   nil,  -123,     7,   -48,
    11,   -44,    15,   -42,    18,   -39,    49,    49,     8,   -23,
   -48,    -6,    19,   -16,   -22,   -26,    -5,   -43,    35,   -25,
   -23,   -59,   nil,   nil,    -1,   nil,   nil,   -37,   -21,  -111,
   -20,   -44,   -55,   -73,   -43,   -68,    20,  -136,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    37,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    56,    62,   nil,   nil,   nil,   148,   nil,   nil,   nil,   nil,
    64,    66,    33,    34,   nil,    36,    38,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   147,   149 ]

racc_reduce_table = [
  0, 0, :racc_error,
  5, 40, :_reduce_none,
  0, 41, :_reduce_none,
  2, 41, :_reduce_none,
  0, 46, :_reduce_4,
  0, 47, :_reduce_5,
  5, 45, :_reduce_6,
  2, 45, :_reduce_none,
  0, 42, :_reduce_8,
  2, 42, :_reduce_none,
  1, 48, :_reduce_none,
  2, 48, :_reduce_none,
  3, 48, :_reduce_none,
  2, 48, :_reduce_none,
  2, 48, :_reduce_none,
  2, 48, :_reduce_15,
  2, 48, :_reduce_16,
  0, 53, :_reduce_17,
  0, 54, :_reduce_18,
  6, 48, :_reduce_19,
  1, 48, :_reduce_none,
  0, 57, :_reduce_21,
  0, 58, :_reduce_22,
  6, 49, :_reduce_23,
  1, 49, :_reduce_none,
  0, 59, :_reduce_25,
  0, 60, :_reduce_26,
  7, 49, :_reduce_none,
  0, 61, :_reduce_28,
  0, 62, :_reduce_29,
  7, 49, :_reduce_30,
  0, 63, :_reduce_31,
  0, 64, :_reduce_32,
  7, 49, :_reduce_33,
  2, 55, :_reduce_none,
  2, 55, :_reduce_35,
  2, 55, :_reduce_36,
  2, 55, :_reduce_37,
  2, 55, :_reduce_38,
  1, 65, :_reduce_39,
  2, 65, :_reduce_40,
  3, 65, :_reduce_41,
  1, 68, :_reduce_42,
  2, 68, :_reduce_43,
  3, 69, :_reduce_44,
  0, 71, :_reduce_none,
  1, 71, :_reduce_46,
  0, 72, :_reduce_none,
  1, 72, :_reduce_none,
  1, 72, :_reduce_49,
  1, 66, :_reduce_50,
  2, 66, :_reduce_51,
  3, 66, :_reduce_52,
  1, 73, :_reduce_53,
  2, 73, :_reduce_54,
  1, 74, :_reduce_none,
  0, 75, :_reduce_56,
  0, 76, :_reduce_57,
  6, 52, :_reduce_58,
  0, 77, :_reduce_59,
  0, 78, :_reduce_60,
  5, 52, :_reduce_61,
  1, 67, :_reduce_62,
  2, 67, :_reduce_63,
  2, 67, :_reduce_64,
  1, 79, :_reduce_65,
  2, 79, :_reduce_66,
  1, 80, :_reduce_none,
  0, 81, :_reduce_68,
  2, 70, :_reduce_69,
  0, 82, :_reduce_70,
  2, 70, :_reduce_71,
  1, 43, :_reduce_none,
  2, 43, :_reduce_none,
  1, 83, :_reduce_none,
  2, 83, :_reduce_none,
  4, 84, :_reduce_76,
  0, 89, :_reduce_77,
  2, 87, :_reduce_78,
  0, 90, :_reduce_79,
  4, 87, :_reduce_80,
  2, 87, :_reduce_none,
  0, 88, :_reduce_82,
  3, 88, :_reduce_83,
  0, 91, :_reduce_84,
  0, 92, :_reduce_85,
  7, 88, :_reduce_86,
  0, 93, :_reduce_87,
  0, 94, :_reduce_88,
  6, 88, :_reduce_89,
  3, 88, :_reduce_90,
  0, 86, :_reduce_none,
  3, 86, :_reduce_92,
  1, 85, :_reduce_none,
  0, 44, :_reduce_none,
  0, 95, :_reduce_95,
  3, 44, :_reduce_96,
  1, 50, :_reduce_none,
  0, 51, :_reduce_none,
  1, 51, :_reduce_none,
  1, 51, :_reduce_none,
  1, 51, :_reduce_none,
  1, 56, :_reduce_102,
  2, 56, :_reduce_103,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 97, :_reduce_106,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none ]

racc_reduce_n = 109

racc_shift_n = 168

racc_token_table = {
  false => 0,
  :error => 1,
  "%%" => 2,
  "%{" => 3,
  :C_DECLARATION => 4,
  "%}" => 5,
  "%require" => 6,
  :STRING => 7,
  "%expect" => 8,
  :INTEGER => 9,
  "%define" => 10,
  "%param" => 11,
  "%lex-param" => 12,
  "%parse-param" => 13,
  "%initial-action" => 14,
  "{" => 15,
  "}" => 16,
  ";" => 17,
  "%union" => 18,
  "%destructor" => 19,
  "%printer" => 20,
  "%error-token" => 21,
  "%token" => 22,
  "%type" => 23,
  "%left" => 24,
  "%right" => 25,
  "%nonassoc" => 26,
  :TAG => 27,
  :string_as_id => 28,
  :IDENTIFIER => 29,
  :CHARACTER => 30,
  ":" => 31,
  "|" => 32,
  "%prec" => 33,
  "[" => 34,
  "]" => 35,
  "{...}" => 36,
  "<*>" => 37,
  "<>" => 38 }

racc_nt_base = 39

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"%%\"",
  "\"%{\"",
  "C_DECLARATION",
  "\"%}\"",
  "\"%require\"",
  "STRING",
  "\"%expect\"",
  "INTEGER",
  "\"%define\"",
  "\"%param\"",
  "\"%lex-param\"",
  "\"%parse-param\"",
  "\"%initial-action\"",
  "\"{\"",
  "\"}\"",
  "\";\"",
  "\"%union\"",
  "\"%destructor\"",
  "\"%printer\"",
  "\"%error-token\"",
  "\"%token\"",
  "\"%type\"",
  "\"%left\"",
  "\"%right\"",
  "\"%nonassoc\"",
  "TAG",
  "string_as_id",
  "IDENTIFIER",
  "CHARACTER",
  "\":\"",
  "\"|\"",
  "\"%prec\"",
  "\"[\"",
  "\"]\"",
  "\"{...}\"",
  "\"<*>\"",
  "\"<>\"",
  "$start",
  "input",
  "prologue_declarations",
  "bison_declarations",
  "grammar",
  "epilogue_opt",
  "prologue_declaration",
  "@1",
  "@2",
  "bison_declaration",
  "grammar_declaration",
  "variable",
  "value",
  "params",
  "@3",
  "@4",
  "symbol_declaration",
  "generic_symlist",
  "@5",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "token_declarations",
  "symbol_declarations",
  "token_declarations_for_precedence",
  "token_declaration_list",
  "token_declaration",
  "id",
  "int_opt",
  "alias",
  "symbol_declaration_list",
  "symbol",
  "@13",
  "@14",
  "@15",
  "@16",
  "token_declaration_list_for_precedence",
  "token_declaration_for_precedence",
  "@17",
  "@18",
  "rules_or_grammar_declaration",
  "rules",
  "id_colon",
  "named_ref_opt",
  "rhs_list",
  "rhs",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "generic_symlist_item",
  "tag" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_4(val, _values, result)
    @status = :c_declaration; @lexer.end_symbol = '%}'; @grammar.prologue_first_lineno = @lexer.line
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_5(val, _values, result)
    @status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_6(val, _values, result)
     @grammar.prologue = val[2]
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.y', 10)
  def _reduce_8(val, _values, result)
     result = ""
    result
  end
.,.,

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

module_eval(<<'.,.,', 'parser.y', 18)
  def _reduce_15(val, _values, result)
     val[1].each {|token| token.references = []; @grammar.lex_param = @grammar.build_code(:lex_param, token).token_code.s_value}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 19)
  def _reduce_16(val, _values, result)
     val[1].each {|token| token.references = []; @grammar.parse_param = @grammar.build_code(:parse_param, token).token_code.s_value}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 20)
  def _reduce_17(val, _values, result)
    @status = :c_declaration; @lexer.end_symbol = '}'; @lineno.push(@lexer.line); @column.push(@lexer.col)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 20)
  def _reduce_18(val, _values, result)
    @status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 20)
  def _reduce_19(val, _values, result)
     code = build_token(type: :User_code, s_value: val[3], line: @lineno.pop, column: @column.pop); code.references = []; @grammar.initial_action = @grammar.build_code(:initial_action, code)
    result
  end
.,.,

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.y', 23)
  def _reduce_21(val, _values, result)
    @status = :c_declaration; @lexer.end_symbol = '}'; @lineno.push(@lexer.line); @column.push(@lexer.col)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 23)
  def _reduce_22(val, _values, result)
    @status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 23)
  def _reduce_23(val, _values, result)
     code = build_token(type: :User_code, s_value: val[3], line: @lineno.pop, column: @column.pop); code.references = []; @grammar.set_union(@grammar.build_code(:union, code), code.line)
    result
  end
.,.,

# reduce 24 omitted

module_eval(<<'.,.,', 'parser.y', 25)
  def _reduce_25(val, _values, result)
    @status = :c_declaration; @lexer.end_symbol = '}'
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 25)
  def _reduce_26(val, _values, result)
    @status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.y', 26)
  def _reduce_28(val, _values, result)
    @status = :c_declaration; @lexer.end_symbol = '}'; @lineno.push(@lexer.line); @column.push(@lexer.col)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 26)
  def _reduce_29(val, _values, result)
    @status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 26)
  def _reduce_30(val, _values, result)
     code = build_token(type: :User_code, s_value: val[3], line: @lineno.pop, column: @column.pop); code.references = []; @grammar.add_printer(ident_or_tags: val[6], code: @grammar.build_code(:printer, code), lineno: code.line)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 27)
  def _reduce_31(val, _values, result)
    @status = :c_declaration; @lexer.end_symbol = '}'; @lineno.push(@lexer.line); @column.push(@lexer.col)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 27)
  def _reduce_32(val, _values, result)
    @status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 27)
  def _reduce_33(val, _values, result)
     code = build_token(type: :User_code, s_value: val[3], line: @lineno.pop, column: @column.pop); code.references = []; @grammar.add_error_token(ident_or_tags: val[6], code: @grammar.build_code(:error_token, code), lineno: code.line)
    result
  end
.,.,

# reduce 34 omitted

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_35(val, _values, result)
     val[1].each {|hash| hash[:tokens].each {|id| @grammar.add_type(id: id, tag: hash[:tag]) } }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 31)
  def _reduce_36(val, _values, result)
     val[1].each {|hash| hash[:tokens].each {|id| sym = @grammar.add_term(id: id); @grammar.add_left(sym, @precedence_number) } }; @precedence_number += 1
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 32)
  def _reduce_37(val, _values, result)
     val[1].each {|hash| hash[:tokens].each {|id| sym = @grammar.add_term(id: id); @grammar.add_right(sym, @precedence_number) } }; @precedence_number += 1
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 33)
  def _reduce_38(val, _values, result)
     val[1].each {|hash| hash[:tokens].each {|id| sym = @grammar.add_term(id: id); @grammar.add_nonassoc(sym, @precedence_number) } }; @precedence_number += 1
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 35)
  def _reduce_39(val, _values, result)
     val[0].each {|token_declaration| @grammar.add_term(id: token_declaration[0], alias_name: token_declaration[2], token_id: token_declaration[1], tag: nil, replace: true) }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 36)
  def _reduce_40(val, _values, result)
     val[1].each {|token_declaration| @grammar.add_term(id: token_declaration[0], alias_name: token_declaration[2], token_id: token_declaration[1], tag: Lrama::Lexer::Token.new(type: Lrama::Lexer::Token::Tag, s_value: val[0]), replace: true) }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 37)
  def _reduce_41(val, _values, result)
     val[2].each {|token_declaration| @grammar.add_term(id: token_declaration[0], alias_name: token_declaration[2], token_id: token_declaration[1], tag: Lrama::Lexer::Token.new(type: Lrama::Lexer::Token::Tag, s_value: val[1]), replace: true) }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 39)
  def _reduce_42(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 40)
  def _reduce_43(val, _values, result)
     result = val[0].append(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_44(val, _values, result)
     result = val
    result
  end
.,.,

# reduce 45 omitted

module_eval(<<'.,.,', 'parser.y', 45)
  def _reduce_46(val, _values, result)
     result = Integer(val[0])
    result
  end
.,.,

# reduce 47 omitted

# reduce 48 omitted

module_eval(<<'.,.,', 'parser.y', 49)
  def _reduce_49(val, _values, result)
     result = %Q("#{val[0]}")
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 51)
  def _reduce_50(val, _values, result)
     result = [{tag: nil, tokens: val[0]}]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 52)
  def _reduce_51(val, _values, result)
     result = [{tag: Lrama::Lexer::Token.new(type: Lrama::Lexer::Token::Tag, s_value: val[0]), tokens: val[1]}]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 53)
  def _reduce_52(val, _values, result)
     result = val[0].append({tag: Lrama::Lexer::Token.new(type: Lrama::Lexer::Token::Tag, s_value: val[1]), tokens: val[2]})
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 55)
  def _reduce_53(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 56)
  def _reduce_54(val, _values, result)
     result = val[0].append(val[1])
    result
  end
.,.,

# reduce 55 omitted

module_eval(<<'.,.,', 'parser.y', 60)
  def _reduce_56(val, _values, result)
    @status = :c_declaration; @lexer.end_symbol = '}'; @lineno.push(@lexer.line); @column.push(@lexer.col)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 60)
  def _reduce_57(val, _values, result)
    @status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 60)
  def _reduce_58(val, _values, result)
     result = val[0].append(build_token(type: :User_code, s_value: val[3], line: @lineno.pop, column: @column.pop))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_59(val, _values, result)
    @status = :c_declaration; @lexer.end_symbol = '}'; @lineno.push(@lexer.line); @column.push(@lexer.col)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_60(val, _values, result)
    @status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_61(val, _values, result)
     result = [build_token(type: :User_code, s_value: val[2], line: @lineno.pop, column: @column.pop)]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 63)
  def _reduce_62(val, _values, result)
     result = [{tag: nil, tokens: val[0]}]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 64)
  def _reduce_63(val, _values, result)
     result = [{tag: Lrama::Lexer::Token.new(type: Lrama::Lexer::Token::Tag, s_value: val[0]), tokens: val[1]}]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 65)
  def _reduce_64(val, _values, result)
     result = val[0].append({tag: nil, tokens: val[1]})
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 67)
  def _reduce_65(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 68)
  def _reduce_66(val, _values, result)
     result = val[0].append(val[1])
    result
  end
.,.,

# reduce 67 omitted

module_eval(<<'.,.,', 'parser.y', 72)
  def _reduce_68(val, _values, result)
     @lineno.push(@lexer.line); @column.push(@lexer.col)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 72)
  def _reduce_69(val, _values, result)
     result = build_token(type: :Ident, s_value: val[1], line: @lineno.pop, column: @column.pop)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 73)
  def _reduce_70(val, _values, result)
     @lineno.push(@lexer.line); @column.push(@lexer.col)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 73)
  def _reduce_71(val, _values, result)
     result = build_token(type: :Char, s_value: val[1], line: @lineno.pop, column: @column.pop)
    result
  end
.,.,

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

module_eval(<<'.,.,', 'parser.y', 81)
  def _reduce_76(val, _values, result)
     lhs = val[0]; lhs.alias = val[1]; val[3].each {|hash| @grammar.add_rule(lhs: lhs, rhs: hash[:rhs], lineno: hash[:lineno]) }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 83)
  def _reduce_77(val, _values, result)
     @lineno.push(@lexer.line)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 83)
  def _reduce_78(val, _values, result)
     result = [{rhs: val[1], lineno: @lineno.pop}]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 84)
  def _reduce_79(val, _values, result)
     @lineno.push(@lexer.line)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 84)
  def _reduce_80(val, _values, result)
     result = val[0].append({rhs: val[3], lineno: @lineno.pop})
    result
  end
.,.,

# reduce 81 omitted

module_eval(<<'.,.,', 'parser.y', 87)
  def _reduce_82(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 88)
  def _reduce_83(val, _values, result)
     token = val[1]; val[1].alias = val[2]; result = val[0].append(token)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 89)
  def _reduce_84(val, _values, result)
    @status = :c_declaration; @lexer.end_symbol = '}'; @lineno.push(@lexer.line); @column.push(@lexer.col)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 89)
  def _reduce_85(val, _values, result)
    @status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 89)
  def _reduce_86(val, _values, result)
     result = val[0].append(build_token(type: :User_code, s_value: val[1..5].join, line: @lineno.pop, column: @column.pop, alias_name: val[6]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 90)
  def _reduce_87(val, _values, result)
    @status = :c_declaration; @lexer.end_symbol = '}'; @lineno.push(@lexer.line); @column.push(@lexer.col)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 90)
  def _reduce_88(val, _values, result)
    @status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 90)
  def _reduce_89(val, _values, result)
     result = [build_token(type: :User_code, s_value: val[0..4].join, line: @lineno.pop, column: @column.pop, alias_name: val[5])]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 91)
  def _reduce_90(val, _values, result)
     sym = @grammar.find_symbol_by_id!(val[2]); result = val[0].append(sym)
    result
  end
.,.,

# reduce 91 omitted

module_eval(<<'.,.,', 'parser.y', 94)
  def _reduce_92(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 93 omitted

# reduce 94 omitted

module_eval(<<'.,.,', 'parser.y', 99)
  def _reduce_95(val, _values, result)
    @status = :c_declaration; @lexer.end_symbol = '\Z'; @grammar.epilogue_first_lineno = @lexer.line + 1
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 99)
  def _reduce_96(val, _values, result)
    @status = :initial; @lexer.end_symbol = nil; @grammar.epilogue = val[2]
    result
  end
.,.,

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

module_eval(<<'.,.,', 'parser.y', 108)
  def _reduce_102(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 109)
  def _reduce_103(val, _values, result)
     result = val[0].append(val[1])
    result
  end
.,.,

# reduce 104 omitted

# reduce 105 omitted

module_eval(<<'.,.,', 'parser.y', 114)
  def _reduce_106(val, _values, result)
     result = Lrama::Lexer::Token.new(type: Lrama::Lexer::Token::Tag, s_value: val[0])
    result
  end
.,.,

# reduce 107 omitted

# reduce 108 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class NewParser
end   # module Lrama
