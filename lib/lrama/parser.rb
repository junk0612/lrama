#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.6.2
# from Racc grammar file "".
#

require 'racc/parser.rb'
module Lrama
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 118)

def initialize(text)
  @text = text
  @yydebug = true
end

def parse
  @status = :initial
  @lexer = Lrama::NewLexer.new(@text)
  @grammar = Lrama::Grammar.new
  @precedence_number = 0
  do_parse
  @grammar.extract_references
  @grammar.prepare
  @grammar.compute_nullable
  @grammar.validate!
  @grammar
end

def next_token
  case @status
  when :initial
    @lexer.lex_token
  when :c_declaration
    @lexer.lex_c_code
  end
end

private

def build_token(type:, s_value:, line:, column:, alias_name: nil)
  token_type = Lrama::Lexer::Token.const_get(type)
  token = Lrama::Lexer::Token.new(type: token_type, s_value: s_value)
  token.line = line
  token.column = column
  token.alias = alias_name

  token
end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    80,    63,     3,   131,     6,   114,     8,     7,    55,   133,
    33,    34,    31,    66,    74,    33,    34,    63,   130,    33,
    34,    40,    79,    33,    34,   133,   113,   134,    43,    81,
    20,    22,    23,    24,    25,    26,    27,    28,    29,    33,
    34,    33,    34,   134,     9,    33,    34,    45,    14,    63,
    12,    63,    13,    15,    16,    17,    18,    63,    45,    19,
    20,    22,    23,    24,    25,    26,    27,    28,    29,    60,
    63,    33,    34,    33,    34,    63,    45,    63,    48,    33,
    34,    63,    33,    34,    66,    63,    33,    34,    66,    63,
    33,    34,    33,    34,    63,    33,    34,    33,    34,    33,
    34,    63,    49,    33,    34,   152,    63,    33,    34,   152,
    63,    33,    34,    50,   152,    51,    33,    34,    33,    34,
    52,   152,    71,    33,    34,    75,   152,    77,    33,    34,
   152,    82,    33,    34,    20,    22,    23,    24,    25,    26,
    27,    28,    29,    33,    34,    33,    34,    33,    34,    33,
    34,    33,    34,    33,    34,    33,    34,    82,    82,    89,
    93,    94,    97,    97,    97,   102,   103,   105,   106,   107,
   108,   109,   110,   117,   118,   121,   122,   123,   137,   138,
   139,   140,   141,   142,   121,    77,   147,   148,   155,   159,
   160,    77,    77 ]

racc_action_check = [
    41,   120,     1,   119,     2,    92,     3,     2,    25,   120,
    25,    25,     7,    27,    32,    27,    27,   143,   119,    13,
    13,    12,    41,   120,   120,   143,    92,   120,    14,    41,
    32,    32,    32,    32,    32,    32,    32,    32,    32,   143,
   143,    32,    32,   143,     4,    54,    54,    15,     4,    26,
     4,    59,     4,     4,     4,     4,     4,    60,    16,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     4,    26,
    94,    26,    26,    59,    59,    96,    17,   115,    18,    60,
    60,   134,    55,    55,    28,   140,    28,    28,    29,   141,
    29,    29,    94,    94,   142,    65,    65,    96,    96,   115,
   115,   149,    20,   134,   134,   140,   153,   140,   140,   141,
   154,   141,   141,    22,   142,    23,   142,   142,    66,    66,
    24,   149,    30,   149,   149,    37,   153,    38,   153,   153,
   154,    44,   154,   154,     9,     9,     9,     9,     9,     9,
     9,     9,     9,    89,    89,     9,     9,    91,    91,    97,
    97,    99,    99,   111,   111,   116,   116,    46,    47,    53,
    57,    58,    64,    69,    70,    76,    77,    83,    84,    85,
    86,    87,    88,   100,   101,   102,   103,   104,   124,   125,
   126,   127,   128,   129,   130,   132,   135,   136,   145,   156,
   158,   159,   160 ]

racc_action_pointer = [
   nil,     2,     1,     6,    42,   nil,   nil,     5,   nil,   116,
   nil,   nil,    12,   -10,    21,    32,    43,    61,    63,   nil,
    87,   nil,    98,   100,   105,   -19,    42,   -14,    57,    61,
   118,   nil,    12,   nil,   nil,   nil,   nil,   108,    93,   nil,
   nil,    -7,   nil,   nil,   116,   nil,   142,   143,   nil,   nil,
   nil,   nil,   nil,   132,    16,    53,   nil,   151,   134,    44,
    50,   nil,   nil,   nil,   135,    66,    89,   nil,   nil,   136,
   137,   nil,   nil,   nil,   nil,   nil,   134,   137,   nil,   nil,
   nil,   nil,   nil,   163,   164,   165,   166,   167,   168,   114,
   nil,   118,    -2,   nil,    63,   nil,    68,   120,   nil,   122,
   168,   170,   160,   141,   173,   nil,   nil,   nil,   nil,   nil,
   nil,   124,   nil,   nil,   nil,    70,   126,   nil,   nil,   -14,
    -6,   nil,   nil,   nil,   162,   163,   164,   165,   166,   167,
   169,   nil,   151,   nil,    74,   182,   171,   nil,   nil,   nil,
    78,    82,    87,    10,   nil,   184,   nil,   nil,   nil,    94,
   nil,   nil,   nil,    99,   103,   nil,   173,   nil,   174,   157,
   158,   nil,   nil ]

racc_action_default = [
    -2,  -103,    -8,  -103,  -103,    -3,    -4,  -103,   163,  -103,
    -9,   -10,  -103,  -103,  -103,  -103,  -103,  -103,  -103,   -20,
  -103,   -24,  -103,  -103,  -103,  -103,  -103,  -103,  -103,  -103,
  -103,    -7,   -91,   -69,   -70,   -71,   -73,  -103,   -88,   -90,
   -11,   -95,   -94,   -13,   -14,   -60,   -15,   -16,   -17,   -21,
   -25,   -28,   -31,   -34,   -39,  -103,   -42,   -45,   -35,   -50,
  -103,   -53,   -55,   -56,   -36,   -63,  -103,   -66,   -68,   -37,
   -38,    -5,    -1,   -72,   -92,   -74,  -103,  -103,   -12,   -96,
   -97,   -98,   -57,  -103,  -103,  -103,  -103,  -103,  -103,  -103,
   -43,   -40,   -47,   -46,  -103,   -54,   -51,  -103,   -67,   -64,
  -103,  -103,   -79,  -103,  -103,   -61,   -18,   -22,   -26,   -29,
   -32,   -41,   -44,   -48,   -49,   -52,   -65,    -6,   -93,   -75,
   -76,   -84,   -89,   -58,  -103,  -103,  -103,  -103,  -103,  -103,
   -79,   -78,   -88,   -81,  -103,  -103,  -103,   -62,   -19,   -23,
  -103,  -103,  -103,   -77,   -80,  -103,   -87,   -85,   -59,   -27,
   -99,  -101,  -102,   -30,   -33,   -82,  -103,  -100,  -103,   -88,
   -88,   -86,   -83 ]

racc_goto_table = [
    76,    61,    59,    39,    90,    98,    99,    42,    54,    35,
   157,     1,   120,     2,   157,   157,    44,    46,    47,    57,
     4,    68,    68,    68,    32,    72,    39,   149,   153,   154,
     5,    30,    73,   100,    95,    61,    96,   116,    91,    98,
   143,    90,    64,    69,    70,    10,    11,    41,    57,    57,
    78,    84,   125,    85,   126,    86,    98,   127,    87,    68,
    68,    90,   128,    88,   129,    53,    58,    92,   112,    61,
   115,    95,   111,   104,   136,    83,   124,   119,   145,   158,
   135,   156,   101,    57,   nil,    57,   nil,   nil,   nil,   nil,
    95,    68,   nil,    68,   144,   132,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    57,   nil,   nil,   nil,   146,
    68,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   132,   nil,
   nil,   161,   162 ]

racc_goto_check = [
    45,    35,    34,    31,    30,    41,    40,    31,    29,    42,
    53,     1,    47,     2,    53,    53,    13,    13,    13,    31,
     3,    31,    31,    31,     4,     5,    31,    17,    17,    17,
     6,     7,    42,     8,    35,    35,    34,    40,    29,    41,
    47,    30,    28,    28,    28,     9,    10,    11,    31,    31,
    12,    14,    15,    18,    19,    20,    41,    21,    22,    31,
    31,    30,    23,    24,    25,    26,    27,    32,    33,    35,
    34,    35,    29,    36,    37,    38,    39,    46,    48,    49,
    50,    51,    52,    31,   nil,    31,   nil,   nil,   nil,   nil,
    35,    31,   nil,    31,    45,    35,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    31,   nil,   nil,   nil,    35,
    31,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    35,   nil,
   nil,    45,    45 ]

racc_goto_pointer = [
   nil,    11,    13,    18,    15,    -7,    28,    25,   -38,    41,
    42,    34,     9,     1,     3,   -54,   nil,  -113,     4,   -53,
     5,   -51,     7,   -47,    11,   -46,    40,    40,    15,   -17,
   -50,    -6,    10,   -24,   -24,   -25,    -9,   -49,    30,   -29,
   -60,   -60,     0,   nil,   nil,   -38,   -25,   -90,   -55,   -76,
   -41,   -66,     8,  -139 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    37,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    56,    62,   nil,   nil,   nil,   151,   nil,   nil,   nil,   nil,
    65,    67,   nil,    36,    38,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   150 ]

racc_reduce_table = [
  0, 0, :racc_error,
  5, 38, :_reduce_none,
  0, 39, :_reduce_none,
  2, 39, :_reduce_none,
  0, 44, :_reduce_4,
  0, 45, :_reduce_5,
  5, 43, :_reduce_6,
  2, 43, :_reduce_none,
  0, 40, :_reduce_8,
  2, 40, :_reduce_none,
  1, 46, :_reduce_none,
  2, 46, :_reduce_none,
  3, 46, :_reduce_none,
  2, 46, :_reduce_none,
  2, 46, :_reduce_none,
  2, 46, :_reduce_15,
  2, 46, :_reduce_16,
  0, 51, :_reduce_17,
  0, 52, :_reduce_18,
  6, 46, :_reduce_19,
  1, 46, :_reduce_none,
  0, 55, :_reduce_21,
  0, 56, :_reduce_22,
  6, 47, :_reduce_23,
  1, 47, :_reduce_none,
  0, 57, :_reduce_25,
  0, 58, :_reduce_26,
  7, 47, :_reduce_none,
  0, 59, :_reduce_28,
  0, 60, :_reduce_29,
  7, 47, :_reduce_30,
  0, 61, :_reduce_31,
  0, 62, :_reduce_32,
  7, 47, :_reduce_33,
  2, 53, :_reduce_none,
  2, 53, :_reduce_35,
  2, 53, :_reduce_36,
  2, 53, :_reduce_37,
  2, 53, :_reduce_38,
  1, 63, :_reduce_39,
  2, 63, :_reduce_40,
  3, 63, :_reduce_41,
  1, 66, :_reduce_42,
  2, 66, :_reduce_43,
  3, 67, :_reduce_44,
  0, 69, :_reduce_none,
  1, 69, :_reduce_none,
  0, 70, :_reduce_none,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  1, 64, :_reduce_50,
  2, 64, :_reduce_51,
  3, 64, :_reduce_52,
  1, 71, :_reduce_53,
  2, 71, :_reduce_54,
  1, 72, :_reduce_none,
  1, 72, :_reduce_56,
  0, 73, :_reduce_57,
  0, 74, :_reduce_58,
  6, 50, :_reduce_59,
  0, 75, :_reduce_60,
  0, 76, :_reduce_61,
  5, 50, :_reduce_62,
  1, 65, :_reduce_63,
  2, 65, :_reduce_64,
  3, 65, :_reduce_65,
  1, 77, :_reduce_66,
  2, 77, :_reduce_67,
  1, 78, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 41, :_reduce_none,
  2, 41, :_reduce_none,
  1, 79, :_reduce_none,
  2, 79, :_reduce_none,
  4, 80, :_reduce_75,
  1, 83, :_reduce_76,
  3, 83, :_reduce_77,
  2, 83, :_reduce_none,
  0, 84, :_reduce_79,
  3, 84, :_reduce_80,
  0, 85, :_reduce_81,
  0, 86, :_reduce_82,
  7, 84, :_reduce_83,
  0, 87, :_reduce_84,
  0, 88, :_reduce_85,
  6, 84, :_reduce_86,
  3, 84, :_reduce_87,
  0, 82, :_reduce_none,
  3, 82, :_reduce_89,
  1, 81, :_reduce_none,
  0, 42, :_reduce_none,
  0, 89, :_reduce_92,
  3, 42, :_reduce_93,
  1, 48, :_reduce_none,
  0, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 54, :_reduce_99,
  2, 54, :_reduce_100,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none ]

racc_reduce_n = 103

racc_shift_n = 163

racc_token_table = {
  false => 0,
  :error => 1,
  "%%" => 2,
  "%{" => 3,
  :C_DECLARATION => 4,
  "%}" => 5,
  "%require" => 6,
  :STRING => 7,
  "%expect" => 8,
  :INTEGER => 9,
  "%define" => 10,
  "%param" => 11,
  "%lex-param" => 12,
  "%parse-param" => 13,
  "%initial-action" => 14,
  "{" => 15,
  "}" => 16,
  ";" => 17,
  "%union" => 18,
  "%destructor" => 19,
  "%printer" => 20,
  "%error-token" => 21,
  "%token" => 22,
  "%type" => 23,
  "%left" => 24,
  "%right" => 25,
  "%nonassoc" => 26,
  :TAG => 27,
  :string_as_id => 28,
  :IDENTIFIER => 29,
  :CHARACTER => 30,
  ":" => 31,
  "|" => 32,
  "%prec" => 33,
  "[" => 34,
  "]" => 35,
  "{...}" => 36 }

racc_nt_base = 37

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"%%\"",
  "\"%{\"",
  "C_DECLARATION",
  "\"%}\"",
  "\"%require\"",
  "STRING",
  "\"%expect\"",
  "INTEGER",
  "\"%define\"",
  "\"%param\"",
  "\"%lex-param\"",
  "\"%parse-param\"",
  "\"%initial-action\"",
  "\"{\"",
  "\"}\"",
  "\";\"",
  "\"%union\"",
  "\"%destructor\"",
  "\"%printer\"",
  "\"%error-token\"",
  "\"%token\"",
  "\"%type\"",
  "\"%left\"",
  "\"%right\"",
  "\"%nonassoc\"",
  "TAG",
  "string_as_id",
  "IDENTIFIER",
  "CHARACTER",
  "\":\"",
  "\"|\"",
  "\"%prec\"",
  "\"[\"",
  "\"]\"",
  "\"{...}\"",
  "$start",
  "input",
  "prologue_declarations",
  "bison_declarations",
  "grammar",
  "epilogue_opt",
  "prologue_declaration",
  "@1",
  "@2",
  "bison_declaration",
  "grammar_declaration",
  "variable",
  "value",
  "params",
  "@3",
  "@4",
  "symbol_declaration",
  "generic_symlist",
  "@5",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "token_declarations",
  "symbol_declarations",
  "token_declarations_for_precedence",
  "token_declaration_list",
  "token_declaration",
  "id",
  "int_opt",
  "alias",
  "symbol_declaration_list",
  "symbol",
  "@13",
  "@14",
  "@15",
  "@16",
  "token_declaration_list_for_precedence",
  "token_declaration_for_precedence",
  "rules_or_grammar_declaration",
  "rules",
  "id_colon",
  "named_ref_opt",
  "rhs_list",
  "rhs",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "generic_symlist_item" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_4(val, _values, result)
    @status = :c_declaration; @lexer.end_symbol = '%}'; @grammar.prologue_first_lineno = @lexer.line
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_5(val, _values, result)
    @status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_6(val, _values, result)
     @grammar.prologue = val[2].s_value
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.y', 10)
  def _reduce_8(val, _values, result)
     result = ""
    result
  end
.,.,

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

module_eval(<<'.,.,', 'parser.y', 18)
  def _reduce_15(val, _values, result)
     val[1].each {|token| token.references = []; @grammar.lex_param = @grammar.build_code(:lex_param, token).token_code.s_value}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 19)
  def _reduce_16(val, _values, result)
     val[1].each {|token| token.references = []; @grammar.parse_param = @grammar.build_code(:parse_param, token).token_code.s_value}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 20)
  def _reduce_17(val, _values, result)
    @status = :c_declaration; @lexer.end_symbol = '}'
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 20)
  def _reduce_18(val, _values, result)
    @status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 20)
  def _reduce_19(val, _values, result)
     @grammar.initial_action = @grammar.build_code(:initial_action, val[3])
    result
  end
.,.,

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.y', 23)
  def _reduce_21(val, _values, result)
    @status = :c_declaration; @lexer.end_symbol = '}'
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 23)
  def _reduce_22(val, _values, result)
    @status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 23)
  def _reduce_23(val, _values, result)
     @grammar.set_union(@grammar.build_code(:union, val[3]), val[3].line)
    result
  end
.,.,

# reduce 24 omitted

module_eval(<<'.,.,', 'parser.y', 25)
  def _reduce_25(val, _values, result)
    @status = :c_declaration; @lexer.end_symbol = '}'
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 25)
  def _reduce_26(val, _values, result)
    @status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.y', 26)
  def _reduce_28(val, _values, result)
    @status = :c_declaration; @lexer.end_symbol = '}'
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 26)
  def _reduce_29(val, _values, result)
    @status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 26)
  def _reduce_30(val, _values, result)
     @grammar.add_printer(ident_or_tags: val[6], code: @grammar.build_code(:printer, val[3]), lineno: val[3].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 27)
  def _reduce_31(val, _values, result)
    @status = :c_declaration; @lexer.end_symbol = '}'
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 27)
  def _reduce_32(val, _values, result)
    @status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 27)
  def _reduce_33(val, _values, result)
     @grammar.add_error_token(ident_or_tags: val[6], code: @grammar.build_code(:error_token, val[3]), lineno: val[3].line)
    result
  end
.,.,

# reduce 34 omitted

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_35(val, _values, result)
     val[1].each {|hash| hash[:tokens].each {|id| @grammar.add_type(id: id, tag: hash[:tag]) } }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 31)
  def _reduce_36(val, _values, result)
     val[1].each {|hash| hash[:tokens].each {|id| sym = @grammar.add_term(id: id); @grammar.add_left(sym, @precedence_number) } }; @precedence_number += 1
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 32)
  def _reduce_37(val, _values, result)
     val[1].each {|hash| hash[:tokens].each {|id| sym = @grammar.add_term(id: id); @grammar.add_right(sym, @precedence_number) } }; @precedence_number += 1
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 33)
  def _reduce_38(val, _values, result)
     val[1].each {|hash| hash[:tokens].each {|id| sym = @grammar.add_term(id: id); @grammar.add_nonassoc(sym, @precedence_number) } }; @precedence_number += 1
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 35)
  def _reduce_39(val, _values, result)
     val[0].each {|token_declaration| @grammar.add_term(id: token_declaration[0], alias_name: token_declaration[2], token_id: token_declaration[1], tag: nil, replace: true) }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 36)
  def _reduce_40(val, _values, result)
     val[1].each {|token_declaration| @grammar.add_term(id: token_declaration[0], alias_name: token_declaration[2], token_id: token_declaration[1], tag: val[0], replace: true) }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 37)
  def _reduce_41(val, _values, result)
     val[2].each {|token_declaration| @grammar.add_term(id: token_declaration[0], alias_name: token_declaration[2], token_id: token_declaration[1], tag: val[1], replace: true) }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 39)
  def _reduce_42(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 40)
  def _reduce_43(val, _values, result)
     result = val[0].append(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_44(val, _values, result)
     result = val
    result
  end
.,.,

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

module_eval(<<'.,.,', 'parser.y', 51)
  def _reduce_50(val, _values, result)
     result = [{tag: nil, tokens: val[0]}]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 52)
  def _reduce_51(val, _values, result)
     result = [{tag: val[0], tokens: val[1]}]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 53)
  def _reduce_52(val, _values, result)
     result = val[0].append({tag: val[1], tokens: val[2]})
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 55)
  def _reduce_53(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 56)
  def _reduce_54(val, _values, result)
     result = val[0].append(val[1])
    result
  end
.,.,

# reduce 55 omitted

module_eval(<<'.,.,', 'parser.y', 59)
  def _reduce_56(val, _values, result)
     result = @lexer.send(:build_token, type: Lrama::Lexer::Token::Ident, s_value: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_57(val, _values, result)
    @status = :c_declaration; @lexer.end_symbol = '}'
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_58(val, _values, result)
    @status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_59(val, _values, result)
     result = val[0].append(val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 62)
  def _reduce_60(val, _values, result)
    @status = :c_declaration; @lexer.end_symbol = '}'
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 62)
  def _reduce_61(val, _values, result)
    @status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 62)
  def _reduce_62(val, _values, result)
     result = [val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 64)
  def _reduce_63(val, _values, result)
     result = [{tag: nil, tokens: val[0]}]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 65)
  def _reduce_64(val, _values, result)
     result = [{tag: val[0], tokens: val[1]}]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 66)
  def _reduce_65(val, _values, result)
     result = val[0].append({tag: val[1], tokens: val[1]})
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 68)
  def _reduce_66(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 69)
  def _reduce_67(val, _values, result)
     result = val[0].append(val[1])
    result
  end
.,.,

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

module_eval(<<'.,.,', 'parser.y', 82)
  def _reduce_75(val, _values, result)
     lhs = val[0]; lhs.alias = val[1]; val[3].each {|hash| @grammar.add_rule(lhs: lhs, rhs: hash[:rhs], lineno: hash[:lineno]) }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 84)
  def _reduce_76(val, _values, result)
     result = [{rhs: val[0], lineno: val[0].first&.line || @lexer.line}]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 85)
  def _reduce_77(val, _values, result)
     result = val[0].append({rhs: val[2], lineno: val[2].first&.line || @lexer.line})
    result
  end
.,.,

# reduce 78 omitted

module_eval(<<'.,.,', 'parser.y', 88)
  def _reduce_79(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 89)
  def _reduce_80(val, _values, result)
     token = val[1]; val[1].alias = val[2]; result = val[0].append(token)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 90)
  def _reduce_81(val, _values, result)
    @status = :c_declaration; @lexer.end_symbol = '}'
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 90)
  def _reduce_82(val, _values, result)
    @status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 90)
  def _reduce_83(val, _values, result)
     token = val[3]; token.alias = val[6]; result = val[0].append(token)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 91)
  def _reduce_84(val, _values, result)
    @status = :c_declaration; @lexer.end_symbol = '}'
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 91)
  def _reduce_85(val, _values, result)
    @status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 91)
  def _reduce_86(val, _values, result)
     token = val[2]; token.alias = val[5]; result = [token]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 92)
  def _reduce_87(val, _values, result)
     sym = @grammar.find_symbol_by_id!(val[2]); result = val[0].append(sym)
    result
  end
.,.,

# reduce 88 omitted

module_eval(<<'.,.,', 'parser.y', 95)
  def _reduce_89(val, _values, result)
     result = val[1].s_value
    result
  end
.,.,

# reduce 90 omitted

# reduce 91 omitted

module_eval(<<'.,.,', 'parser.y', 100)
  def _reduce_92(val, _values, result)
    @status = :c_declaration; @lexer.end_symbol = '\Z'; @grammar.epilogue_first_lineno = @lexer.line + 1
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 100)
  def _reduce_93(val, _values, result)
    @status = :initial; @lexer.end_symbol = nil; @grammar.epilogue = val[2].s_value
    result
  end
.,.,

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

module_eval(<<'.,.,', 'parser.y', 109)
  def _reduce_99(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 110)
  def _reduce_100(val, _values, result)
     result = val[0].append(val[1])
    result
  end
.,.,

# reduce 101 omitted

# reduce 102 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module Lrama
